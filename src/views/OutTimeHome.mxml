<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	title="OutTime" 
	viewActivate="onViewActivate(event)" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	>
	
	<fx:Declarations>
		<mx:SolidColor id="elapsedColor" color="white"/>
		<mx:SolidColor id="remainingColor" color="0x009ADF" alpha=".3"/>
	</fx:Declarations>

	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@font-face { 
			src: url("../assets/fonts/PrintClearlyTT.ttf"); 
			fontFamily: printClearly; 
			embedAsCFF: false; 
		}
		@font-face { 
			src: url("../assets/fonts/LearningCurve.ttf"); 
			fontFamily: learningCurve; 
			embedAsCFF: false; 
		}
		.display {
			fontFamily: learningCurve;
			fontSize: 100;
			color: black;
			borderVisible:false;
			contentBackgroundColor:white;
			contentBackgroundAlpha:0;
		}
		.paragraph {
			fontFamily: printClearly;
			fontSize: 70;			
			color: black;
			borderVisible:false;
			contentBackgroundColor:white;
			contentBackgroundAlpha:0;
		}
		.clock {
			fontFamily: printClearly;
			fontSize: 100;
			color: #F15A24;
			borderVisible:false;
			contentBackgroundColor:white;
			paddingBottom:0;
			paddingTop:0;
			paddingLeft:0;
			paddingRight:0;
		}
		.buttonStyle {
			embedFonts: true;
			fontFamily: printClearly;
			fontWeight: normal;
			fontSize: 60;
			cornerRadius: 0;
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import spark.components.supportClasses.StyleableTextField;
			import spark.events.ViewNavigatorEvent;

			/**
			[Bindable]
			[Embed("assets/launchpad_default_icon32.png")]
			public var fbIcon:Class;
			 */

			protected const DATABASE_FILE:String = "outtime.db";
			protected const MINUTES_DEFAULT:int = 1;
			protected const MINUTES_MIN:int = 1;
			protected const MINUTES_MAX:int = 5;
			protected const ELAPSED:String = "elapsed";
			protected const REMAINING:String = "remaining";
			
			[Bindable] protected var minutesSet:int;
			[Bindable] protected var secondsRemaining:int;
			[Bindable] protected var pieData:ArrayCollection;
			
			protected var sqlConnection:SQLConnection;
			
			protected function onViewActivate(event:ViewNavigatorEvent):void
			{
				minutesSet = MINUTES_DEFAULT;
				
				sqlConnection = new SQLConnection();
				sqlConnection.addEventListener(SQLEvent.OPEN, onOpenDatabase);
				sqlConnection.addEventListener(SQLErrorEvent.ERROR, onSQLError);				
				sqlConnection.open(File.applicationStorageDirectory.resolvePath(DATABASE_FILE));
				
				pieData = new ArrayCollection([0, minutesSet]);
			}
						
			protected function onOpenDatabase(event:SQLEvent):void {
				trace("database opened successfully");
				
				// creates "settings" table
				var statement:SQLStatement = new SQLStatement();
				statement.sqlConnection = sqlConnection;
				statement.addEventListener(SQLEvent.RESULT, onCreateTable);
				statement.addEventListener(SQLErrorEvent.ERROR, onSQLError);
				
				statement.text = 
					"CREATE TABLE IF NOT EXISTS settings (" + 
						"name TEXT NOT NULL PRIMARY KEY, " + 
						"value TEXT NOT NULL DEFAULT ''" + 
					")";
				statement.execute();
			}
			
			protected function onCreateTable(e:SQLEvent):void {
				trace("table created successfully");

				// creates a "minutes" row, if it doesn't already exist
				var statement:SQLStatement = new SQLStatement();
				statement.sqlConnection = sqlConnection;
				
				trace("trying to store minutes");
				statement.text = "INSERT INTO settings (name, value) VALUES (:name, :value)";
				statement.parameters[":name"] = "minutes";
				statement.parameters[":value"] = minutesSet;
					
				try {
					statement.execute();
					trace("minutes successfully stored");
				} catch (error:SQLError) {
					// if the row does already exist	
					if (error.errorID == 3131 && error.detailArguments[0] == "name") {
						trace("a 'minutes' row already exists");
						
						// gets the existing value from the database
						// and uses it to set 'mins'
						statement.clearParameters();
						statement.text = "SELECT value FROM settings WHERE name = 'minutes'";
						try {
							statement.execute();
							trace("minutes successfully retrieved");
							var result:SQLResult = statement.getResult();
							minutesSet = Number(Object(result.data[0]).value);
						} catch (error:SQLError) {
							trace("Error message: " + error.message);
							trace("Details: " + error.details);
						}
					}
				}
			}
												
			protected function onSQLError(e:SQLErrorEvent):void {
				trace("Error message: " + e.error.message);
				trace("Details: " + e.error.details);
			}
												
			protected function increment(event:MouseEvent):void {
				minutes.text = (++minutesSet).toString();
				save();
			}
			
			protected function decrement(event:MouseEvent):void {
				minutes.text = (--minutesSet).toString();
				save();
			}
			
			protected function save():void
			{
				var statement:SQLStatement = new SQLStatement();
				statement.sqlConnection = sqlConnection;
				statement.text = "UPDATE settings SET value = :minutes WHERE name = 'minutes'";
				statement.parameters[":minutes"] = minutesSet;
				statement.execute();
			}
			
			protected function startTimer(e:MouseEvent):void {
				trace("start button pressed");
				this.currentState = "run";
				secondsRemaining = minutesSet * 60;
				
				var timer:Timer = new Timer(1000, secondsRemaining);
				timer.addEventListener(TimerEvent.TIMER, countDown);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, showEnd);
				timer.start();
				updateClock();
			}
			
			protected function countDown(e:TimerEvent):void {
				secondsRemaining--;
				updateClock();
			}
			
			protected function updateClock():void {					
				var m:String = Math.floor(secondsRemaining / 60).toString();

				var s:String = (secondsRemaining % 60).toString();
				s = s.length < 2 ? "0" + s: s;		
				
				clock.text = m + ":" + s;
				
				pieData[0] = minutesSet*60 - secondsRemaining;
				pieData[1] = secondsRemaining;
			}
			
			protected function showEnd(e:TimerEvent):void {
				this.currentState = "end";
				var sound:Sound = new Sound(new URLRequest("assets/ding.mp3"));
				sound.play();
			}
		]]>
	</fx:Script>

	<s:layout>
		<s:VerticalLayout gap="0" horizontalAlign="center" verticalAlign="middle" />
	</s:layout>
	
	<s:states>
		<s:State name="set" />
		<s:State name="run" />
		<s:State name="end" />
	</s:states>

	<s:Group includeIn="set">
		<s:TextArea text="How many" textAlign="center" styleName="paragraph" width="600" editable="false" selectable="false" horizontalCenter="0" verticalCenter="-300" />
		<s:TextArea id="question" text="minutes" textAlign="center" styleName="display" width="600" editable="false" selectable="false" scaleX="2" scaleY="2" horizontalCenter="0" verticalCenter="-200" />
		<s:TextArea text="?" textAlign="center" styleName="display" editable="false" selectable="false" scaleX="2" scaleY="2" horizontalCenter="{StyleableTextField(question.textDisplay).width/2 + 60}" verticalCenter="-200" />
		<s:HGroup verticalAlign="middle" horizontalCenter="0" verticalCenter="0">
			<s:Button id="less" label="less" click="decrement(event)" enabled="{minutesSet > MINUTES_MIN}" />
			<s:TextArea id="minutes" styleName="clock" width="150" scaleX="2" scaleY="2"
						text="{minutesSet}" textAlign="center"
						editable="false" selectable="false" />
			<s:Button id="more" label="more" click="increment(event)" enabled="{MINUTES_MAX > minutesSet}" />
		</s:HGroup>
		<s:Button id="start" label="start!" click="startTimer(event)" horizontalCenter="0" verticalCenter="200" styleName="buttonStyle" />
	</s:Group>
	
	<s:VGroup horizontalAlign="center" includeIn="run">
		<mx:PieChart id="pie" dataProvider="{pieData}" rotation="-90" >
			<mx:series>
				<mx:PieSeries fills="{[elapsedColor, remainingColor]}" filters="[]" />	
			</mx:series>
		</mx:PieChart>
		<s:HGroup verticalAlign="middle" gap="0">
			<s:TextArea id="clock" styleName="clock" textAlign="center" editable="false" selectable="false" scaleX="2" scaleY="2"/>
		</s:HGroup>
	</s:VGroup>

	<s:Group includeIn="end">
		<s:TextArea text="time to say" styleName="paragraph" textAlign="center" editable="false" selectable="false" horizontalCenter="0" verticalCenter="-200"/>
		<s:TextArea text="sorry" styleName="display" textAlign="center" editable="false" selectable="false" scaleX="2.5" scaleY="2.5" horizontalCenter="0" verticalCenter="-100" />
		<s:Button label="all done" click="{this.currentState='set';}" styleName="buttonStyle" horizontalCenter="0" verticalCenter="200" />
	</s:Group>

	
</s:View>