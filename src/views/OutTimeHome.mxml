<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	title="OutTime" 
	viewActivate="onViewActivate(event)" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	>
	
	<fx:Declarations>
		<mx:SolidColor id="elapsedColor" color="blue"/>
		<mx:SolidColor id="remainingColor" color="yellow" alpha=".3"/>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import spark.events.ViewNavigatorEvent;

			/**
			[Bindable]
			[Embed("assets/launchpad_default_icon32.png")]
			public var fbIcon:Class;
			 */

			protected const DATABASE_FILE:String = "outtime.db";
			protected const MINUTES_DEFAULT:int = 1;
			protected const MINUTES_MIN:int = 1;
			protected const MINUTES_MAX:int = 5;
			protected const ELAPSED:String = "elapsed";
			protected const REMAINING:String = "remaining";
			
			[Bindable] protected var minutesSet:int;
			[Bindable] protected var secondsRemaining:int;
			[Bindable] protected var pieData:ArrayCollection;
			
			protected var sqlConnection:SQLConnection;
			
			protected function onViewActivate(event:ViewNavigatorEvent):void
			{
				minutesSet = MINUTES_DEFAULT;
				
				sqlConnection = new SQLConnection();
				sqlConnection.addEventListener(SQLEvent.OPEN, onOpenDatabase);
				sqlConnection.addEventListener(SQLErrorEvent.ERROR, onSQLError);				
				sqlConnection.open(File.applicationStorageDirectory.resolvePath(DATABASE_FILE));
				
				pieData = new ArrayCollection([0, minutesSet]);
			}
						
			protected function onOpenDatabase(event:SQLEvent):void {
				trace("database opened successfully");
				
				// creates "settings" table
				var statement:SQLStatement = new SQLStatement();
				statement.sqlConnection = sqlConnection;
				statement.addEventListener(SQLEvent.RESULT, onCreateTable);
				statement.addEventListener(SQLErrorEvent.ERROR, onSQLError);
				
				statement.text = 
					"CREATE TABLE IF NOT EXISTS settings (" + 
						"name TEXT NOT NULL PRIMARY KEY, " + 
						"value TEXT NOT NULL DEFAULT ''" + 
					")";
				statement.execute();
			}
			
			protected function onCreateTable(e:SQLEvent):void {
				trace("table created successfully");

				// creates a "minutes" row, if it doesn't already exist
				var statement:SQLStatement = new SQLStatement();
				statement.sqlConnection = sqlConnection;
				
				trace("trying to store minutes");
				statement.text = "INSERT INTO settings (name, value) VALUES (:name, :value)";
				statement.parameters[":name"] = "minutes";
				statement.parameters[":value"] = minutesSet;
					
				try {
					statement.execute();
					trace("minutes successfully stored");
				} catch (error:SQLError) {
					// if the row does already exist	
					if (error.errorID == 3131 && error.detailArguments[0] == "name") {
						trace("a 'minutes' row already exists");
						
						// gets the existing value from the database
						// and uses it to set 'mins'
						statement.clearParameters();
						statement.text = "SELECT value FROM settings WHERE name = 'minutes'";
						try {
							statement.execute();
							trace("minutes successfully retrieved");
							var result:SQLResult = statement.getResult();
							minutesSet = Number(Object(result.data[0]).value);
						} catch (error:SQLError) {
							trace("Error message: " + error.message);
							trace("Details: " + error.details);
						}
					}
				}
			}
												
			protected function onSQLError(e:SQLErrorEvent):void {
				trace("Error message: " + e.error.message);
				trace("Details: " + e.error.details);
			}
												
			protected function increment(event:MouseEvent):void {
				minutes.text = (++minutesSet).toString();
				save();
			}
			
			protected function decrement(event:MouseEvent):void {
				minutes.text = (--minutesSet).toString();
				save();
			}
			
			protected function save():void
			{
				var statement:SQLStatement = new SQLStatement();
				statement.sqlConnection = sqlConnection;
				statement.text = "UPDATE settings SET value = :minutes WHERE name = 'minutes'";
				statement.parameters[":minutes"] = minutesSet;
				statement.execute();
			}
			
			protected function startTimer(e:MouseEvent):void {
				trace("start button pressed");
				this.currentState = "run";
				secondsRemaining = minutesSet * 60;
				
				var timer:Timer = new Timer(1000, secondsRemaining);
				timer.addEventListener(TimerEvent.TIMER, countDown);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, showEnd);
				timer.start();
				updateClock();
			}
			
			protected function countDown(e:TimerEvent):void {
				secondsRemaining--;
				updateClock();
			}
			
			protected function updateClock():void {					
				clockMinutes.text = Math.floor(secondsRemaining / 60).toString();

				var s:String = (secondsRemaining % 60).toString();
				clockSeconds.text = s.length < 2 ? "0" + s: s;				
				
				pieData[0] = minutesSet*60 - secondsRemaining;
				pieData[1] = secondsRemaining;
			}
			
			protected function showEnd(e:TimerEvent):void {
				this.currentState = "end";
				var sound:Sound = new Sound(new URLRequest("assets/ding.mp3"));
				sound.play();
			}
		]]>
	</fx:Script>

	<s:layout>
		<s:VerticalLayout gap="0" horizontalAlign="center" verticalAlign="middle" />
	</s:layout>
	
	<s:states>
		<s:State name="set" />
		<s:State name="run" />
		<s:State name="end" />
	</s:states>

	<s:VGroup horizontalAlign="center" includeIn="set">
		<s:Label text="How long?" fontSize="100" textAlign="center" />
		<s:HGroup verticalAlign="middle">
			<s:Button id="less" label="less" click="decrement(event)" enabled="{minutesSet > MINUTES_MIN}" />
			<s:Label id="minutes" text="{minutesSet}" fontSize="200" width="250" textAlign="center" />
			<s:Button id="more" label="more" click="increment(event)" enabled="{MINUTES_MAX > minutesSet}" />
		</s:HGroup>
		<s:Label text="{minutesSet > 1 ? 'minutes' : 'minute'}" fontSize="100" textAlign="center" />
		<s:Button id="start" label="start!" click="startTimer(event)" />
	</s:VGroup>
	
	<s:VGroup horizontalAlign="center" includeIn="run">
		<mx:PieChart id="pie" showDataTips="true" dataProvider="{pieData}">
			<mx:series>
				<mx:PieSeries fills="{[elapsedColor, remainingColor]}" />	
			</mx:series>
		</mx:PieChart>
		<s:Group>
			<s:HGroup verticalAlign="middle" verticalCenter="0" horizontalCenter="0">
				<s:Label id="clockMinutes" fontSize="200" textAlign="justify" />
				<s:Label id="clockColon" text=":" fontSize="200" textAlign="justify" />
				<s:Label id="clockSeconds" fontSize="200" textAlign="justify" />
			</s:HGroup>
		</s:Group>
	</s:VGroup>

	<s:VGroup horizontalAlign="center" includeIn="end">
		<s:Label text="ding!" fontSize="200" textAlign="center" />
		<s:Button label="ok" click="{this.currentState='set';}" />
	</s:VGroup>

	
</s:View>