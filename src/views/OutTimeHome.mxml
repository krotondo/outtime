<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	title="OutTime" 
	viewActivate="onViewActivate(event)"
	>

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import spark.events.ViewNavigatorEvent;

			/**
			[Bindable]
			[Embed("assets/launchpad_default_icon32.png")]
			public var fbIcon:Class;
			 */

			protected const DATABASE_FILE:String = "outtime.db";
			protected const MINUTES_DEFAULT:int = 1;
			protected const MINUTES_MIN:int = 1;
			protected const MINUTES_MAX:int = 5;
			
			[Bindable]
			protected var mins:int = 0;
			
			protected var sqlConnection:SQLConnection;
			
			protected function onViewActivate(event:ViewNavigatorEvent):void
			{				
				this.currentState = "set";
				mins = MINUTES_DEFAULT;
				
				sqlConnection = new SQLConnection();
				sqlConnection.addEventListener(SQLEvent.OPEN, onOpenDatabase);
				sqlConnection.addEventListener(SQLErrorEvent.ERROR, onSQLError);				
				sqlConnection.open(File.applicationStorageDirectory.resolvePath(DATABASE_FILE));
			}
			
			protected function onOpenDatabase(event:SQLEvent):void {
				trace("database opened successfully");
				
				// creates "settings" table
				var statement:SQLStatement = new SQLStatement();
				statement.sqlConnection = sqlConnection;
				statement.addEventListener(SQLEvent.RESULT, onCreateTable);
				statement.addEventListener(SQLErrorEvent.ERROR, onSQLError);
				
				statement.text = 
					"CREATE TABLE IF NOT EXISTS settings (" + 
						"name TEXT NOT NULL PRIMARY KEY, " + 
						"value TEXT NOT NULL DEFAULT ''" + 
					")";
				statement.execute();
			}
			
			protected function onCreateTable(e:SQLEvent):void {
				trace("table created successfully");

				// creates a "minutes" row, if it doesn't already exist
				var statement:SQLStatement = new SQLStatement();
				statement.sqlConnection = sqlConnection;
				
				trace("trying to store minutes");
				statement.text = "INSERT INTO settings (name, value) VALUES (:name, :value)";
				statement.parameters[":name"] = "minutes";
				statement.parameters[":value"] = mins;
					
				try {
					statement.execute();
					trace("minutes successfully stored");
				} catch (error:SQLError) {
					// if the row does already exist	
					if (error.errorID == 3131 && error.detailArguments[0] == "name") {
						trace("a 'minutes' row already exists");
						
						// gets the existing value from the database
						// and uses it to set 'mins'
						statement.clearParameters();
						statement.text = "SELECT value FROM settings WHERE name = 'minutes'";
						try {
							statement.execute();
							trace("minutes successfully retrieved");
							var result:SQLResult = statement.getResult();
							mins = Number(Object(result.data[0]).value);
						} catch (error:SQLError) {
							trace("Error message: " + error.message);
							trace("Details: " + error.details);
						}
					}
				}
			}
												
			protected function onSQLError(e:SQLErrorEvent):void {
				trace("Error message: " + e.error.message);
				trace("Details: " + e.error.details);
			}
												
			protected function increment(event:MouseEvent):void {
				minutes.text = (++mins).toString();
				save();
			}
			
			protected function decrement(event:MouseEvent):void {
				minutes.text = (--mins).toString();
				save();
			}
			
			protected function save():void
			{
				var statement:SQLStatement = new SQLStatement();
				statement.sqlConnection = sqlConnection;
				statement.text = "UPDATE settings SET value = :minutes WHERE name = 'minutes'";
				statement.parameters[":minutes"] = mins;
				statement.execute();
			}
			
			protected function startTimer(e:MouseEvent):void {
				trace("start button pressed");
				this.currentState = "run";
			}

		]]>
	</fx:Script>

	<s:layout>
		<s:VerticalLayout gap="0" horizontalAlign="center" verticalAlign="middle" />
	</s:layout>
	
	<s:states>
		<s:State name="set" />
		<s:State name="run" />
	</s:states>

	<s:VGroup horizontalAlign="center" includeIn="set">
		<s:Label text="How many minutes?" fontSize="50" textAlign="center" />
		<s:HGroup verticalAlign="middle">
			<s:Button id="less" label="less" click="decrement(event)" enabled="{mins > MINUTES_MIN}" />
			<s:Label id="minutes" text="{mins}" fontSize="200" width="250" textAlign="center" />
			<s:Button id="more" label="more" click="increment(event)" enabled="{MINUTES_MAX > mins}" />
		</s:HGroup>
		<s:Button id="start" label="start!" click="startTimer(event)" />
	</s:VGroup>
	
	<s:VGroup horizontalAlign="center" includeIn="run">
		<s:Label text="Timer goes here" fontSize="50" textAlign="center" />
	</s:VGroup>
	
</s:View>